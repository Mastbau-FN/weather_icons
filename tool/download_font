#!/usr/bin/env node

const { tmpdir } = require('os')
const { resolve, join, dirname } = require('path')

const request = require('request')
const Zip = require('adm-zip')
const { ensureDir, createWriteStream, unlink, remove } = require('fs-extra')
const yargs = require('yargs')

const args = yargs.option('c', { alias: 'clean', default: true }).argv

const DEFAULT_DOWNLOAD_DIR = tmpdir()
const DOWNLOAD_FILENAME = 'weather_icons.zip'
const DEFAULT_OUTPUT_DIR = resolve(__dirname, '../lib/fonts')
const DOWNLOAD_URL =
  'https://github.com/erikflowers/weather-icons/archive/master.zip'

const verbose = args.v || args.verbose || false
const downloadURL = args.u || args.url || DOWNLOAD_URL
const downloadDir = resolve(args.d || args.download || DEFAULT_DOWNLOAD_DIR)
const output = resolve(args.o || args.output || DEFAULT_OUTPUT_DIR)
const clean = args.c

const log = require('./util').createLogger(verbose)

const downloadFolder = join(downloadDir, 'weather_icons')
const downloadPath = join(downloadFolder, DOWNLOAD_FILENAME)

if (args.h || args.help) return printUsage()

start().catch(err => {
  console.error(`Unhandled error: ${err}`)
  process.exit(1)
})

async function start() {
  log.i('WeatherIcons downloader')
  log.v(`Download URL : ${downloadURL}`)
  log.v(`Download dir : ${downloadFolder}`)
  log.v(`Download file: ${downloadPath}`)
  log.v(`Output dir   : ${output}`)
  log.v(`Clean        : ${clean}`)

  await downloadVersion()
  await unzipDownload()

  if (clean) {
    try {
      log.i(`Cleaning up...`)
      log.v(`Removing ${downloadFolder}`)

      await remove(downloadFolder)
    } catch (error) {
      console.error('Unable to clean up!')
      console.error(error)
      process.exit(1)
    }
  }
}

async function downloadVersion() {
  try {
    await download(downloadURL, downloadPath)
  } catch (error) {
    console.error(`Unable to download ${url}`)
    console.error(error)
    process.exit(1)
  }
}

async function unzipDownload() {
  const zip = new Zip(downloadPath)
  const entries = zip.getEntries()
  log.v(`Zip contains ${entries.length} entries`)

  const filtered = entries
    .filter(entry => entry.entryName.includes('.ttf'))
    .filter(entry => !entry.entryName.includes('_docs'))
  log.v(`Found ${filtered.length} matching files`)

  const found = filtered[0]
  if (!found) {
    log.i(`Unable to find matching font file!`)
    return false
  }

  log.i(`Found [${found.entryName}]`)
  log.v(`Extracting to [${output}]`)
  const result = zip.extractEntryTo(found, output, false, true)
  if (!result) {
    log.i(`Unable to extract ${found.entryName} to ${output}`)
    return false
  }

  log.i(`Extracted ${output}/${found.name}`)
  return true
}

async function download(url, dest) {
  log.i(`Downloading: ${url}`)
  log.v(`To: ${dest}`)

  await ensureDir(dirname(dest))
  return new Promise((resolve, reject) => {
    const file = createWriteStream(dest).on('error', err => reject(err))
    request(url)
      .pipe(file)
      .on('close', () => resolve())
      .on('error', err => {
        unlink(dest)
        reject(err)
      })
  })
}

function printUsage() {
  log.i(
    `Usage: ${__filename} [options]

  Download font files for erikflowers/weather-icons.

  Options:

    --help     -h  Print this usage message
    --url      -u  Download URL for the font zip
      (default: ${downloadURL})
    --verbose  -v  Log extra information to stdout             (default: false)
    --download -d  Directory to download temporary files       (default: /tmp)
    --output   -o  Directory to place the font files           (default: ./lib/fonts)
    --clean    -c  Clean up the temporary files                (default: true)

    You can disable the cleaning of temporary files by passing '--no-clean' or '--clean false'.
    `.trim(),
  )
}
